from py2neo import *

# 连接
test_graph = Graph('http://localhost:7474', auth=('neo4j', '123456'))

# 定义实体类型
# A = Node("概念", name="向量", chapter=1, ID=100)
# B = Node("属性", name="向量叉积", chapter=1, ID=99)
# test_graph.create(A)
# test_graph.create(B)

# test_graph.create(Relationship(B, "下属于", A))

A = Node("概念", name="向量", chapter=1, ID=100)

part_to = ["方向", "起点", "内积", "模", "终点", "数量积"]

strong_related = ["几何表示", "向量模的性质", "数轴上向量的坐标运算", "向量共线的性质", "单位向量的定义",
                  "运算律""坐标表示", "向量的长度的定义", "向量的数量积的定义", "向量的投影的定义", "三角形法则",
                  "向量的模的定义", "要素", "向量正交分解的定义", "第一分配率", "向量平行的性质", "第二分配率", "向量的性质",
                  "坐标运算", "线性运算", "平行四边形法则", "零向量的性质", "向量的减法的定义", "平面几何中的向量方法",
                  "向量内积的性质", "向量的夹角的定义", "向量的数乘的定义", "向量垂直的性质", "向量在物理中的应用",
                  "向量的定义", "取值范围", "向量的加法的定义", "向量的起点的定义", "向量的终点的定义", "结合律", ]

related = ["复合变换的定义", "立体几何中的向量方法", "单位正交基底的定义", "向量共线的性质", "几何表示",
           "空间直角坐标系的定义", "向量平行的性质", "基本定理", "坐标表示", "向量的终点的定义", "坐标运算",
           "列向量的性质", "要素", "共面向量的定义", "向量的数乘运算的定义", "零向量的性质", "相等向量的定义",
           "向量形式", "向量的定义", "向量的投影的定义", "数列与向量综合", "平面几何中的向量方法", "相反向量的定义",
           "单位向量的定义", "平面向量基本定理", "复数的模的定义", "数列与解析几何综合", "向量的数乘的定义",
           "向量的起点的定义", "线性运算", "数列与立体几何综合", "向量正交分解的定义", "空间向量线性运算的性质",
           "向量在物理中的应用", "三角形法则", "向量的长度的定义", "方向向量", "矩阵特征向量的性质", "共面向量定理",
           "向量的模的定义", "平行四边形法则", "空间向量的性质", "空间向量模的性质", "向量的加法的定义", "取值范围",
           "向量的性质", "数轴上向量的坐标运算", "零向量的定义", "向量的夹角的定义", "向量的减法的定义", "几何意义",
           "向量的基底的定义", "行向量的性质", ]

belog_to = ["平面向量", "法向量", "非零向量", "共面向量", "单位向量",
            "平行向量", "零向量", "基底", "相反向量", "相等向量", "空间向量", "共线向量"]

ID = 100
for i in belog_to:
    ID += 1
    temp = Node("概念", name=i, chapter=2, ID=ID)
    test_graph.create(Relationship(temp, "下属于", A))

for i in part_to:
    ID += 1
    temp = Node("属性", name=i, chapter=3, ID=ID)
    test_graph.create(Relationship(temp, "部分于", A))

for i in related:
    ID += 1
    temp = Node("属性", name=i, chapter=4, ID=ID)
    test_graph.create(Relationship(temp, "相关于", A))

for i in strong_related:
    ID += 1
    temp = Node("属性", name=i, chapter=5, ID=ID)
    test_graph.create(Relationship(temp, "强相关于", A))